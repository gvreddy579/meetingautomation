/*
 * Created on Jul 16, 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package in.gov.cgg.struts.utils.database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import javax.servlet.ServletException;

import org.apache.commons.dbcp.BasicDataSource;
import org.apache.struts.action.ActionServlet;
import org.apache.struts.action.PlugIn;
import org.apache.struts.config.ModuleConfig;
import org.apache.struts.util.LabelValueBean;


public class DataBasePlugin implements PlugIn 
{
	public static BasicDataSource datasource;

	public DataBasePlugin() 
	{
		//    	initializing datasource
	}
	public void init(ActionServlet actionServlet, ModuleConfig modConfig)
	throws ServletException 
	{
		try
		{
			datasource=(BasicDataSource)actionServlet.getServletContext().getAttribute("ssa");
			//System.out.println("ssa---------------------------------------------------------------------------");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	public void destroy() 
	{
		try {
			if(datasource!=null) 
					datasource.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	public static Connection getConnection()
	{
		Connection con=null;
		try
		{
			do
			{
				con=datasource.getConnection();
				System.out.println("-->: DS FinNs AFTER CONNECTING : Active : " + datasource.getNumActive() + " - Idle : " + datasource.getNumIdle() );
			}
			while(con==null || con.isClosed());
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return con;
	}
	public static void closeConnection(Connection _con) 
	{
		try
		{
			if(_con!=null) {
				if(!_con.isClosed()) {
					_con.close();
					_con=null;
				}
				else
					_con=null;
			}
		}
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			System.gc();
		}
	}
	public synchronized static ResultSet selectQuery(String sql,Connection con)
	{
		Statement st=null;
		ResultSet rs = null;
		try
		{
			st=con.createStatement();
			rs= st.executeQuery(sql);	   
		}
		catch(SQLException se)
		{
			se.printStackTrace();
		} 
		return rs;
	}
	
	public synchronized static ArrayList selectDataAsArryList(String sql,Connection con)
	{
		ArrayList<ArrayList<String>> matrix = null;
		ArrayList<String> row = null;
		Statement st=null;
		ResultSet rs=null;
		try
		{
			st=con.createStatement();
			//System.out.println(sql);
			rs=st.executeQuery(sql);
			if(rs!=null)
			{
				matrix = new ArrayList<ArrayList<String>>();
				int colCount = getColCount(rs);
				while(rs.next())
				{
					row = new ArrayList<String>();
					for(int i=1; i<=colCount; i++)
					{
						row.add(rs.getString(i));
					}
					matrix.add(row);
				}
			}
		}
		catch(SQLException se)
		{
			se.printStackTrace();
		}
		finally
		{
			try
			{
				rs.close();
				st.close();
			}catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		//System.out.println(matrix);
		return matrix;
	}
	public synchronized static int updateQuery(String sql,Connection con)
	{
		int value=0;  
		Statement st=null;
		try
		{
			st=con.createStatement();
			value= st.executeUpdate(sql);	   
		}
		catch(SQLException se)
		{
			se.printStackTrace();
		} 
		finally
		{
			try
			{
				st.close();
			}catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		return value;
	}
	public static int getRowCount(ResultSet rs)
	{
		int rowCount=0;
		try
		{
			while(rs.next())
			{
				rowCount++;
			}
			rs.first();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return rowCount;
	}
	public static int getColCount(ResultSet rs)
	{
		int rowCount=0;
		try
		{
			if(rs!=null) {
				ResultSetMetaData rsmd=rs.getMetaData();
				rowCount=rsmd.getColumnCount();
			}
			else 
				rowCount=0;

		}
		catch(Exception e)
		{

		}
		return rowCount;
	}
	public synchronized static ArrayList getSelectBox(String sql,Connection con)
	{
		ArrayList<LabelValueBean> selectData = new ArrayList<LabelValueBean>();
		Statement st=null;
		ResultSet rs=null;
		try
		{
			st=con.createStatement();
			System.out.println("sql"+sql);
			rs=st.executeQuery(sql);
			while(rs!=null && rs.next())
			{
				selectData.add(new LabelValueBean(rs.getString(2),rs.getString(1)));
			}
		}
		catch(SQLException se)
		{
			se.printStackTrace();
		}
		finally
		{
			try
			{
				st.close();
				rs.close();
			}catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		return selectData;
	}
	public static boolean isExist(String sql,Connection con)
	{
		Statement st=null;
		ResultSet rs=null;
		boolean value=false;  
		try
		{
			st=con.createStatement();
			rs=st.executeQuery(sql);   
			if(rs!=null && rs.next()){
				if (rs.getString(1) != null && !rs.getString(1).equals("0")) {
					value = true;
				}
			}
		}
		catch(SQLException se)
		{
			se.printStackTrace();
		}finally
		{
			try
			{
				rs.close();
				st.close();
			}catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		return value;
	}
	public static String getValueById(String sql,Connection con){

		ResultSet rs=null;
		String value="";
		try
		{
			//System.out.println("sql @ DataBasePlugin: "+sql);
			rs = selectQuery(sql, con);
			if(rs!=null && rs.next()){
				value=rs.getString(1);
			}
		}
		catch(SQLException se)
		{
			se.printStackTrace();
		}finally
		{
			try
			{
				if(rs != null)
					rs.close();
			}catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		return value;
	}
	public static String getClobData(String sql, Connection con) {
		
		Statement stmt = null;
		ResultSet rs = null;
		String clobData = null;
		try
		{
			//System.out.println("sql:"+sql);
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			if(rs != null && rs.next())
			{
//				CLOB myClob = ((OracleResultSet) rs).getCLOB(1);
//				int length = (int) myClob.length();
//				clobData = myClob.getSubString(1, length);
//		        if (clobData.length() > 100) 
//		        	clobData = clobData.substring(0,clobData.length());
				clobData=rs.getString(1);
			}
		}
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		return clobData;
	}
	public static int getMaxNumber(String tableName,String field,String whereCondition,Connection con) throws SQLException
	{ 
		Statement st=null;
		ResultSet rs=null;
		int genCode=0;
		String sql=null;
		sql="SELECT (CASE WHEN MAX("+ field +") IS NULL THEN 0 ELSE MAX("+ field +") END) AS MAX_NUMBER FROM "+ tableName +" "+whereCondition+" " ;
		try
		{ 
			st=con.createStatement();
			//System.out.println("sql="+sql);
			rs=st.executeQuery(sql);
			if (rs!=null && rs.next())
			{	
				genCode= rs.getInt(1)+1;
			} else	 
				genCode=1;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			if(rs != null)
				rs.close();
			if(st != null)
				st.close();
		}
		return genCode;	
	}
	public static String selectString(String sql,Connection con){
		Statement st=null;
		ResultSet rs=null;
		String str="";
		try
		{
			st=con.createStatement();
			//System.out.println("sql="+sql);
			rs = st.executeQuery(sql);
			if(rs!=null && rs.next()){
				str=rs.getString(1);
			}
		}
		catch(SQLException se)
		{
			se.printStackTrace();
		}
		finally
		{
			try
			{
				st.close();
				rs.close();
			}catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		return str;
	}
	public static void closeStatement(Statement _stmt) 
	{
		try
		{
			if(_stmt!=null) {
				_stmt.close();
				_stmt=null;
			}
			else
				_stmt=null;
		}
		catch(Exception e) 
		{
			e.printStackTrace();
		}
	}

	public static void closePreparedStatement(PreparedStatement _pstmt) 
	{
		try
		{
			if(_pstmt!=null) {
				_pstmt.close();
				_pstmt=null;
			}
			else
				_pstmt=null;
		}
		catch(Exception e) 
		{
			e.printStackTrace();
		}
	}

	public static void closeResultSet(ResultSet _rs) 
	{
		try
		{
			if(_rs!=null) {
				_rs.close();
				_rs=null;
			}
			else
				_rs=null;
		}
		catch(Exception e) 
		{
			e.printStackTrace();
		}
	}
}