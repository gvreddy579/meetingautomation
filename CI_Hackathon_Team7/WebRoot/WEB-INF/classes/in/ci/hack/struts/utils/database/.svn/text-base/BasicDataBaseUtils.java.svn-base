package in.gov.cgg.struts.utils.database;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

import cgg.gov.common.commonFunctions;
import cgg.gov.plugin.DatabasePlugin;
import org.apache.struts.util.LabelValueBean;
/**
 * @author Abdulla P
 */

public class BasicDataBaseUtils 
{
	public static void setLogInTrnInfo(String remoteAdd, String userSerialNo,Connection con)
	{
			String sql="INSERT INTO LOGIN_TRN_INFO(TRANSACTION_ID, LOGIN_TIME, SYSTEM_IP, USER_SERIAL_NO) VALUES((SELECT NEXTVAL('TRANSACTION_ID')), NOW(), '"+remoteAdd+"', "+userSerialNo+")";
			//System.out.println("SQL ofsetLogInTrnInfo :"+sql);
			DataBasePlugin.updateQuery(sql, con);
	}
	public static void setUserLoginInfo(String userSerialNo,Connection con)
	{
		String sql="SELECT USER_SERIAL_NO FROM USER_AUDIT_LOG WHERE USER_SERIAL_NO='"+userSerialNo+"'";
		String userStatus=DataBasePlugin.getValueById(sql, con);
		if(userStatus!=null && !userStatus.equals(""))
			sql="UPDATE USER_AUDIT_LOG SET LOG_IN= NOW(),USER_TRN=1 WHERE USER_SERIAL_NO='"+userSerialNo+"'";
		else
			sql="INSERT INTO USER_AUDIT_LOG(USER_SERIAL_NO, LOG_IN,USER_TRN) VALUES('"+userSerialNo+"', NOW(),1)";
		DataBasePlugin.updateQuery(sql, con);
		
	}
	public static void setUserLogoutInfo(String userSerialNo,Connection con)
	{
		String sql="UPDATE USER_AUDIT_LOG SET LOG_OUT= NOW(),USER_TRN=2 WHERE USER_SERIAL_NO="+userSerialNo+"";
		//System.out.println("sql="+sql);
		DataBasePlugin.updateQuery(sql, con);
	}
	public static ArrayList optionsDataTypeList()
	{
		ArrayList<LabelValueBean> list = new ArrayList<LabelValueBean>();
		try
		{
			list.add(new LabelValueBean("Plain Text","1"));
			list.add(new LabelValueBean("Files Uploading","2"));
			list.add(new LabelValueBean("Table Format","3"));
			list.add(new LabelValueBean("Plain Text-Table Format","6"));
			list.add(new LabelValueBean("Photos Uploading","4"));
			list.add(new LabelValueBean("Link Mapping","5"));
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return list;
	}
	public static String autoGenColumn(Connection con,String tableName,String field) throws SQLException
	{ 
		Statement st=null;
		ResultSet rs=null;
		int genCode=0;
		String sql=null;
		sql="select max("+ field +") from "+ tableName ;
		try
		{ 
			st=con.createStatement();
			rs=st.executeQuery(sql);
			if (rs!=null && rs.next())
			{	
				if (rs.getString(1)==null)
					genCode=1;
				else 
					genCode= rs.getInt(1)+1;
			} else	 
				genCode=1;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			if(rs != null)
				rs.close();
			if(st != null)
				st.close();
		}
		return Integer.toString(genCode);	
	}
	public static int getCurrentQuarter()
	{
		int quarter = 1;
		try {
			Calendar c = Calendar.getInstance();
			int month = c.get(Calendar.MONTH);
			if (month >= Calendar.JANUARY && month <= Calendar.MARCH)
				quarter = 1;
			else if (month >= Calendar.APRIL && month <= Calendar.JUNE)
				quarter = 2;
			else if (month >= Calendar.JULY && month <= Calendar.SEPTEMBER)
				quarter = 3;
			else
				quarter = 4;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return quarter;
	}
	public static int getCurrentYear()
	{
		return Calendar.getInstance().get(Calendar.YEAR);
	}
	public static int getCurrentMonth()
	{
		return Calendar.getInstance().get(Calendar.MONTH);
	}
	// userd in Post Dynamic DAta Action
	public static ArrayList getOptionsList(String roleId,String centreId)
	{
		ArrayList<LabelValueBean> list = new ArrayList<LabelValueBean>();
		try
		{
			/*String sql="";
			if(roleId!=null && roleId.equals("7"))
				sql="SELECT OPTION_ID, NAME_ENGLISH FROM OPTIONS_MST WHERE case when 1="+roleId+" then true else ROLE_ID="+roleId+" end  AND URL<>'home.do'  and delete_flag='F'  ORDER BY MENU_ORDER";
			else if(roleId!=null && roleId.equals("2"))
				sql="SELECT OPTION_ID, NAME_ENGLISH FROM OPTIONS_MST WHERE ROLE_ID<>3  AND (CASE WHEN OPTION_ID=3 THEN URL='home.do' ELSE URL<>'home.do' END)  and delete_flag='F' ORDER BY NAME_ENGLISH";
			else
				sql="SELECT OPTION_ID, NAME_ENGLISH FROM OPTIONS_MST WHERE  case when 1="+roleId+" then true else ROLE_ID="+roleId+" end  AND (CASE WHEN OPTION_ID=3 THEN URL='home.do' ELSE URL<>'home.do' END) and delete_flag='F' ORDER BY NAME_ENGLISH";
			
			System.out.println("sql::"+sql);
			list = DatabasePlugin.getSelectBox(sql);
			System.out.println("list"+list);*/
			String sql="";
			if(roleId!=null && roleId.equals("7"))
				sql="SELECT level, NAME_ENGLISH FROM OPTIONS_MST WHERE  ROLE_ID="+roleId+" and delete_flag='F'  ORDER BY MENU_ORDER";
			else if(roleId!=null && roleId.equals("2"))
				sql="SELECT level, NAME_ENGLISH FROM OPTIONS_MST WHERE ROLE_ID<>3   and delete_flag='F' ORDER BY NAME_ENGLISH";
			else
				sql="SELECT level, NAME_ENGLISH FROM OPTIONS_MST WHERE   ROLE_ID="+roleId+" and delete_flag='F' ORDER BY NAME_ENGLISH";
			
			commonFunctions.log("Option Id's===::"+sql);
			list = DatabasePlugin.getSelectBox(sql);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return list;
	}
	public static ArrayList getEmployeeDashboardList(Connection con)
	{
		ArrayList<LabelValueBean> list = new ArrayList<LabelValueBean>();
		try
		{
			list = DataBasePlugin.getSelectBox("SELECT SERVICE_ID, SERVICE_NAME FROM SERVICES_MST WHERE SERVICE_ID IN(23,24,25,26,27,28) ORDER BY SERVICE_ID", con);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return list;
	}
	
	public static ArrayList<LabelValueBean> getyearList(int fromYear,int toYear, boolean isFinancialYear) throws Exception
	{
		ArrayList<LabelValueBean> yearList = new ArrayList<LabelValueBean>();
		for(;fromYear<=toYear;fromYear++)
		{
			if(isFinancialYear) {
				yearList.add(new LabelValueBean(fromYear+"-"+(fromYear+1), Integer.toString(fromYear)));
			} else {
				yearList.add(new LabelValueBean(Integer.toString(fromYear),Integer.toString(fromYear)));
			}
		}
		return yearList;
	}
	public static ArrayList<LabelValueBean> getMonthsList() {
		ArrayList<LabelValueBean> months=new ArrayList<LabelValueBean>();
		months.add(new LabelValueBean("January","01"));
		months.add(new LabelValueBean("February","02"));
		months.add(new LabelValueBean("March","03"));
		months.add(new LabelValueBean("April","04"));
		months.add(new LabelValueBean("May","05"));
		months.add(new LabelValueBean("June","06"));
		months.add(new LabelValueBean("July","07"));
		months.add(new LabelValueBean("August","08"));
		months.add(new LabelValueBean("September","09"));
		months.add(new LabelValueBean("October","10"));
		months.add(new LabelValueBean("November","11"));
		months.add(new LabelValueBean("December","12"));
		
		return months;
	}
	public static ArrayList<LabelValueBean> getQuarterList() throws Exception
	{
		ArrayList<LabelValueBean> quarterList = new ArrayList<LabelValueBean>();
		quarterList.add(new LabelValueBean("Quarter 1","1"));
		quarterList.add(new LabelValueBean("Quarter 2","2"));
		quarterList.add(new LabelValueBean("Quarter 3","3"));
		quarterList.add(new LabelValueBean("Quarter 4","4"));
		return quarterList;
	}
	
	
	public static String getCurrentDate()
	{
		Calendar currentDate = Calendar.getInstance();
		SimpleDateFormat formatter=  new SimpleDateFormat("dd/MM/yyyy");
		String dateNow = formatter.format(currentDate.getTime());
		return dateNow;
	}
	
	public static ArrayList<HashMap<String, Object>> getListMapData(ResultSet rs,String addSerialNo)
	{
		ArrayList<HashMap<String, Object>> reportData = new ArrayList<HashMap<String, Object>>();
		ResultSetMetaData rm = null;
		HashMap<String, Object> rowData = null;
		int noOfCols = 0,serialNo=1;
		try{
			rm = rs.getMetaData();
			noOfCols = rm.getColumnCount();
			if(rs!=null && rs.next())
			{
				do {
					rowData = new HashMap<String, Object>(noOfCols);
					if (addSerialNo.equalsIgnoreCase("yes"))
					{
						rowData.put("serial",Integer.toString(serialNo));
					}
					for(int i=1;i<=noOfCols;i++)
					{
						rowData.put(rm.getColumnName(i).toLowerCase(), ((rs.getObject(i)!=null && !rs.getObject(i).equals(""))?rs.getObject(i):""));
					} 
					reportData.add(rowData);
					serialNo++;
				} while(rs.next());
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			try {
				if(rs!=null) {
					rs.close();
				}
			} catch (SQLException se) {
				// TODO: handle exception
				se.printStackTrace();
			}
		}

		return reportData;
	}
}