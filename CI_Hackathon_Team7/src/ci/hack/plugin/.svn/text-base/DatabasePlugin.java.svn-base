/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 * Author:			Surjan
 * Created on:                  1-05-2008
 * Module:			
 * Project:			SSAFMS
 * Last Modified on:            2-05-2008
 * Tested by:
 * Tested on:
 */
package cgg.gov.plugin;

import cgg.gov.admin.forms.*;
import cgg.gov.common.commonFunctions;

import org.apache.commons.dbcp.BasicDataSource;
import org.apache.struts.util.LabelValueBean;



import in.gov.cgg.struts.utils.database.DataBasePlugin;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.*;
import java.sql.*;
import java.util.ArrayList;
import javax.sql.DataSource;
import javax.servlet.ServletContext;
import org.apache.struts.action.ActionServlet;
import org.apache.struts.action.PlugIn;
import org.apache.struts.config.ModuleConfig;

 

/**
 *
 * @author root
 */
public class DatabasePlugin implements PlugIn {               // new class 

    static ServletContext context = null;                           //declaring servletcontext
    public static DataSource datasource = null;                     //declaring and intializing the data source
    
    @Override
	public void init(ActionServlet actionServlet, ModuleConfig config) {   //initial methond to get the data source
        context = actionServlet.getServletContext();
        datasource = (DataSource) context.getAttribute("ssa");
         }
               // declaring resultset
    
    
    public static Connection connect()
    {
    	    Connection con = null;
    	try{
    		 
    				 con = datasource.getConnection();
    				 System.out.println("---------------------------------------------------------->: DS CCE sai ram  AFTER CONNECTING : : Active : " + ((BasicDataSource)datasource).getNumActive() + " -  Idle : " + ((BasicDataSource)datasource).getNumIdle() );
    			 
             
             }catch(Exception e) {
            	 
             e.printStackTrace();
        }
        return con;
        
    }
     
    
    public static int pstmtExecuteUpdate(String sql, ArrayList<String> sqlValues)
			throws SQLException {
		int a = 0;
		
		PreparedStatement pstmt = null;
		String[] column_type = null;
		 Connection con = null;
		//ArrayList innerSqlValues;
		try {
			con = connect(); 
			pstmt = con.prepareStatement(sql);
			if (sqlValues != null && sqlValues.size() > 0) {
				for (int i = 0; i < sqlValues.size(); i++) {
					if(sqlValues.get(i)!=null)
						column_type = ((String) sqlValues.get(i)).split("~");
					if (column_type.length == 2) {
						if (column_type[0] == null || column_type[0].equals("null")) {
							column_type[0] = null;
							pstmt.setNull(i + 1, Types.NULL);
						} else {
							 //System.out.println("column_type1"+column_type[1]);
							 
							if (column_type[1].equals("int")) {
								// System.out.println(i +1+"final came"+Integer.parseInt(column_type[0]));
								pstmt.setInt(i + 1, Integer
										.parseInt(column_type[0]));
							} else if (column_type[1]
									.equals("float")) {
								pstmt.setFloat(i + 1, Float
										.parseFloat(column_type[0]));
							}  else if (column_type[1]
									.equals("double")) {
								pstmt.setDouble(i + 1, Double
										.parseDouble(column_type[0]));
							} else if (column_type[1]
									.equals("bool")) {
								pstmt.setBoolean(
										i + 1,
										Boolean.parseBoolean(column_type[0]));
							}
						}
					 
					} else {
						if (sqlValues.get(i) == null
								|| sqlValues.get(i).equals(
										"null")) {
							pstmt.setNull(i + 1, Types.NULL);
						} else {
							// System.out.println("final came2");
							pstmt.setString(i + 1,
									(String) sqlValues.get(i));
						}
					}
					// System.out.println(i + 1 +" :: "+
					// sqlValues.get(i).toString());
				}
			}
			// System.out.println("SQL :: "+sql);
			a = pstmt.executeUpdate();

		} catch (SQLException se) {
			a = -1;
			se.printStackTrace();
		} finally {
			if (con != null && !con.isClosed()) {
				con.close();
			}
			if (pstmt != null) {
				pstmt.close();
			}
		  // closing all connections statement
		}
		return a;
	}
    
	 public static List<Map<String, Object>> executeQueryMap(String sql) 
	 {
		 	Connection con = null;
		 	PreparedStatement ps = null;
		 	List<Map<String, Object>> result = null;
		 	
		 	try 
		 	{
		 		con = connect(); 
		 		ps = con.prepareStatement(sql);
				ResultSet rs = ps.executeQuery();
				result = processResultSet(rs,false);				
		 	} 
		 	
		 	catch(SQLException s)	
		 	{
		 		s.printStackTrace();
		 	}
		 	
		 	catch(Exception e) 
		 	{		 		
		 		e.printStackTrace();
		 	} 
		 	finally 
		 	{
		 		close(con, ps, null);
		 	}
		 	return result;
		}

	 /** General Functions to convert ResultSet into List of Maps
	  * @return List
	  */
	 
	 private static List<Map<String, Object>> processResultSet(ResultSet rs, boolean isSlno) throws SQLException {
		 List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
		 ResultSetMetaData rm = rs.getMetaData();
		 int cols = rm.getColumnCount();
		 int k=1;
		 if (rs != null) {
			 result = new ArrayList<Map<String, Object>>();
			 while (rs.next()) {
				 Map<String, Object> row = new HashMap<String, Object>(cols);
				 for (int i=1; i<=cols; i++) {
					 String columnName = rm.getColumnName(i);
					 Object columnValue = rs.getObject(i);
					 if (isSlno) {
						 row.put("slno",k);
					 }
					 
					 row.put(columnName,columnValue);
				 } 
				 result.add(row);
				 k++;
			 }			 
		 }
		 return result;
	 }
	 
	 
	 
    /* this method returns a string*/
    public static String getStringfromQuery(String sql) //a method to get a string from sql
    {
        String first = ""; 
        Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
        //declaring a string                
        try {
            con = connect();                   //creating connection 
            st = con.createStatement();                          //statemant
            sql=sql.replaceAll("'null'", "null");
            rs = st.executeQuery(sql);                          //resultset
            if (rs.next()) {
                first = rs.getString(1);                        //assigning a value to the string  
            }
            //commonFunctions.log(first+" --DatabasePlugin.getStringfromQuery(String sql)::"+sql);
        } catch (SQLException se) {
        	commonFunctions.log("SQLException at DatabasePlugin.getStringfromQuery(String sql)::"+sql);
            se.printStackTrace();
             
        } finally {
            DatabasePlugin.close(con, st, rs);                 //closing all connections statement
        }
        return first;                                           //returning the string
    }                                                          // closing the method

    /* this method returns a integer value*/
    public static int executeUpdate(String sql) {                 //a mehtod to execute sql
        int a = 0;
        Connection con = null;
        Statement st   = null;
        
        try 
        {
            con = connect();
            st = con.createStatement();
            sql=sql.replaceAll("'null'", "null");
            //System.out.println("replace sql : "+sql);
            a = st.executeUpdate(sql);

        } 
        
        catch (SQLException se) 
        {
        	commonFunctions.log("SQLException at DatabasePlugin.executeUpdate(String sql)::"+sql);
            se.printStackTrace();
            
        } 
        
        finally 
        {
            DatabasePlugin.close(con, st, null);
           
        }
        
        return a;
    }                  
    
    
    
    //end of execute update method 

    public static int executeUpdate1(String sql) {                 //a mehtod to execute sql
        int a = 0;
        Connection con = null;
        Statement st   = null;
        
        try 
        {
            con = connect();
            st = con.createStatement();
            System.out.println("sql---"+sql);
            sql= sql.replaceAll("'null'", "null");
            
            System.out.println("sql replaceAll---"+sql);
            a = st.executeUpdate(sql);

        } 
        
        catch (SQLException se) 
        {
        	
        	//commonFunctions.log("getSQLState:"+se.getSQLState());
        	//commonFunctions.log("getErrorCode:"+se.getErrorCode());
        	//commonFunctions.log("getSQLState:- "+se.getMessage());
        	if(se.getSQLState().equals("23505"))
        	{
        		a=23505;
        	}
        	commonFunctions.log("SQLException at DatabasePlugin.executeUpdate1(String sql)::"+sql);
            se.printStackTrace();
        } 
        
        finally 
        {
            DatabasePlugin.close(con, st, null);
           
        }
        
        return a;
    }        
    
    
    
    /* this method returns a ArrayList*/
    public static ArrayList selectQuery(String sql) {               //method to run select query
        ArrayList a = new ArrayList();
        Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
        try {
            con = connect();
            st = con.createStatement();
            sql= sql.replaceAll("'null'", "null");
            System.out.println("sql::"+sql);
            rs = st.executeQuery(sql);
            a = DatabasePlugin.getRs2ArrayList(rs);
        } catch (SQLException se) {
        	commonFunctions.log("SQLException at DatabasePlugin.selectQuery(String sql):: "+sql);
            se.printStackTrace();
        } finally {
            DatabasePlugin.close(con, st, rs);
        }
        return a;
    }

    /* this method returns a ArrayList*/
    public static ArrayList selectQuery4singlerow(String sql) {               //method to run select query
        ArrayList a = new ArrayList();
        Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
        try {
            con = connect();
            st = con.createStatement();
            sql= sql.replaceAll("'null'", "null");
            rs = st.executeQuery(sql);
            int colCount = getColCount(rs);
            while (rs.next()) {
                for (int i = 1; i <= colCount; i++) {
                    a.add(rs.getString(i));
                }
            }
            commonFunctions.log(" the arraylist*:" + a);
        } catch (SQLException se) {
            se.printStackTrace();
        } finally {
            DatabasePlugin.close(con, st, rs);
        }
        return a;
    }
    
    
    
    //VishnuTeja
   
    public static boolean recordExists1(String tableName, String whereCondition)
	{
		boolean flag=false;
		Connection con= null;
		Statement st=null;
		ResultSet rs=null;
		
		try
		{
			con = connect();
			st = con.createStatement();
			
			String sql="select count(*) from "+tableName+" "+whereCondition+" ";
			
			System.out.println("sql="+sql);
			
			rs=st.executeQuery(sql);
			
			if (rs!=null && rs.next())
			{
				if (rs.getString(1).equals("0"))
					flag=false;
				else
					flag=true;
			}
			else
				flag=false;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			flag=false;
		}
		finally
		{
			try
			{
				st.close();
				rs.close();
				con.close();
				st=null;
				rs=null;
				con=null;
			}
			catch(Exception ex)
			{
				ex.printStackTrace();
			}
		}
		return flag;
	}
    
    public static HashMap<String, Object> getMap(String sql)
	{
		HashMap<String, Object> reportData = null;
		Statement stmt = null;
		ResultSet rs = null;
		Connection con = null;
		
		try 
		{
			con = connect();
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			reportData = getMap(rs);
		} 
		
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		finally 
		{
			try 
			{
				if (rs != null) 
				{
					rs.close();
				}
				
				if (stmt != null) 
				{
					stmt.close();
				}
				
				if (con != null) 
				{
					con.close();
				}
				
			} 
			catch (SQLException e) 
			{
				e.printStackTrace();
			}
		}
		
		return reportData;
	}
    
    public static HashMap<String, Object> getMap(ResultSet rs)
	{
		ResultSetMetaData rm = null;
		HashMap<String, Object> reportData = null;
		int noOfCols = 0;
		try{
			rm = rs.getMetaData();
			noOfCols = rm.getColumnCount();
			if(rs.next())
			{
				reportData = new HashMap<String, Object>(noOfCols);
				for(int i=1;i<=noOfCols;i++)
				{
					reportData.put(rm.getColumnName(i).toLowerCase(), ((rs.getObject(i)!=null && !rs.getObject(i).equals(""))?rs.getObject(i):""));
				} 
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		} finally {
			try {
				if(rs!=null) {
					rs.close();
				}
			} catch (SQLException se) {
				
				se.printStackTrace();
			}
		}
		
		return reportData;
	}
    
	public static ArrayList getOptionsList(String sql,int noOfParameters)
	{
		//System.out.println("sql "+sql);
		ArrayList<LabelValueBean> reportData=new ArrayList<LabelValueBean>();
		ResultSet rs=null;
		Statement st=null;
		Connection con = null;
		
			
		try
		{
			con = connect();
			st=con.createStatement();
			rs=st.executeQuery(sql);
						while(rs!=null && rs.next())
			{				
				if (noOfParameters==3)
					reportData.add(new LabelValueBean(rs.getString(2)+" -- "+rs.getString(3)+" -- "+rs.getString(4),rs.getString(1)));
				else if (noOfParameters==1)
					reportData.add(new LabelValueBean(rs.getString(1)+"-"+rs.getString(2),rs.getString(3)));
				else
					reportData.add(new LabelValueBean(rs.getString(2),rs.getString(1)));
			}	
		}
		
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				rs.close();
				st.close();
				con.close();
			}
			catch(Exception ex)
			{
				ex.printStackTrace();
			}
		}
		return reportData;	
	}

	public static ArrayList<LabelValueBean> getyearList(int fromYear,int toYear, boolean isFinancialYear) throws Exception
	{
		ArrayList<LabelValueBean> yearList = new ArrayList<LabelValueBean>();
		for(;fromYear<=toYear;fromYear++)
		{
			//System.out.println("fromYear----"+fromYear);
			//System.out.println("toYear----"+toYear);
			if(isFinancialYear) {
				yearList.add(new LabelValueBean(fromYear+"-"+(fromYear+1), Integer.toString(fromYear)));
			} else {
				yearList.add(new LabelValueBean(Integer.toString(fromYear),Integer.toString(fromYear)));
			}
		}
		return yearList;
	}

	
    //VishnuTeja
    
// this method converts result set into Arraylist and returns it 
    public static ArrayList getRs2ArrayList(ResultSet rs) 
    {
        ArrayList matrix = new ArrayList();
        ArrayList row = null;
        try {
            if (rs != null) 
            {
                int colCount = getColCount(rs);
                while (rs.next()) 
                {
                    row = new ArrayList();
                    for (int i = 1; i <= colCount; i++) 
                    {
                        row.add(rs.getString(i));
                    }
                    matrix.add(row);
                }
            }
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
        return matrix;
    }

    //this method returns the column count of the result set we send
    public static int getColCount(ResultSet rs) {
        int rowCount = 0;
        try {
            ResultSetMetaData rsmd = rs.getMetaData();
            rowCount = rsmd.getColumnCount();
        } catch (Exception e) {
            commonFunctions.log("In getColumnCount" + e);
        }
        return rowCount;
    }

    public static ArrayList getLabelValueBeans(ArrayList twoDimList, boolean forCombo) {
        ArrayList lvBeans = new ArrayList();
        if (null == twoDimList || twoDimList.size() == 0 || ((ArrayList) twoDimList.get(0)).size() > 2 || ((ArrayList) twoDimList.get(0)).size() < 1) {
        } else {
            Iterator iter = twoDimList.iterator();
            while (iter.hasNext()) {
                ArrayList rowItem = (ArrayList) iter.next();

                if (rowItem.size() > 1) 
                {
                    lvBeans.add(new LabelValueBean((String) rowItem.get(0), (String) rowItem.get(1)));
                } 
                else 
                {
                    lvBeans.add(new LabelValueBean((String) rowItem.get(0), (String) rowItem.get(0)));
                }
            }
        }
        if (forCombo) {
            lvBeans.add(0, new LabelValueBean("--Select--", "0"));
        }
        return lvBeans;
    }

    
    public static void returnStringArray(String sql, UserRolesForm urForm) {

        String assignedUsers[] = new String[100];
        int i = 0;
        Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
        try {
            con = connect();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            if (rs != null) {
                while (rs.next()) {
                    assignedUsers[i] = rs.getString(1);
                    i++;
                }
                urForm.setSelectedUsers(assignedUsers);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(con, st, rs);
        }
    }
    
    public static int getMaxNumber(String tableName,String field,String whereCondition) throws SQLException
	{ 
		 
		int genCode=0;
		String sql=null;
		Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
		sql="SELECT (CASE WHEN MAX("+ field +") IS NULL THEN 0 ELSE MAX("+ field +") END) AS MAX_NUMBER FROM "+ tableName +" "+whereCondition+" " ;
		try
		{ 
			con = connect();
			st=con.createStatement();
			//System.out.println("sql="+sql);
			rs=st.executeQuery(sql);
			if (rs!=null && rs.next())
			{	
				genCode= rs.getInt(1)+1;
			} else	 
				genCode=1;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			 close(con, st, rs);
		}
		return genCode;	
	}
    
    
    public static void returnAssignedServices(String sql, RoleServicesMappingForm rsForm) {
      commonFunctions.log("in return assigned services");
        String assignedServices[] = new String[100];
        int i = 0;
        Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
        try {
            con = connect();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            if (rs != null) {
                while (rs.next()) {
                    assignedServices[i] = rs.getString(1);
                    i++;
                }
                rsForm.setSelectedServices(assignedServices);
            }commonFunctions.log("in return assigned services"+rsForm.getSelectedServices());
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(con, st, rs);
        }
    }
   

    public static void close(Connection con, Statement st, ResultSet rs) {      //method to close all connections statementsand resultset
        try { 
        	//try block

            if (rs != null) {
                rs.close();
            }

            if (st != null) {
                st.close();
            }
            if (con != null) {
                con.close();
            }
        } //end of try
        catch (Exception e) {                                                   //catch
            e.printStackTrace();                                                //end of catch
        } finally{
        	st=null;
        	rs=null;
        	con=null;
        }
    }

    @Override
	public void destroy() {
     //   throw new UnsupportedOperationException("Not supported yet.");
    }
    
    
    public static int executeBatch(ArrayList sqls) throws SQLException
	{
		commonFunctions.log("sql size "+sqls.size());
		int value=0;
		Connection con = null;
    	Statement st=null;
    	 
		try 
		{
			if(sqls.size()>0 && sqls!=null)
			{
	            con = connect();
	            con.setAutoCommit(false);
	            if ( null== con )
	            		throw new SQLException("executeBatch(): NULL Connection/Query ");
	            	st = con.createStatement();
	            	
				for(int i=0; i<sqls.size(); i++)
				{
					commonFunctions.log("sql size "+i+" "+sqls.get(i));
					//sql;
					st.addBatch(((String)sqls.get(i)).replaceAll("'null'", "null"));
				}
				
				int count[]=st.executeBatch();
	
				for(int i=0;i<count.length;i++)
				{
					//System.out.println("count[i] - " + count[i]);
						if(value<count[i])value=count[i];
				}
				con.commit();
			}
	    }		
		catch (SQLException se) 
		{
			commonFunctions.log("getSQLState:"+se.getSQLState());
        	commonFunctions.log("getErrorCode:"+se.getErrorCode());
        	commonFunctions.log("getSQLState:- "+se.getMessage());
	            se.printStackTrace();
	    } 
		
		finally 
	    {
	            DatabasePlugin.close(con, st, null);
	    }
	    
		System.out.println("value - " + value);
		
		return value;
	}
    
    /* this method returns a ArrayList for Search purpose*/
    public static String selectQuerySA(String sql) {               //method to run select query
        //ArrayList a = new ArrayList();
    	String finalSearch="";
    	Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
        try {
            con = connect();
            st = con.createStatement();
            rs = st.executeQuery(sql);
            while(rs.next()){
            	String un=rs.getString("name");
            	finalSearch+=un+"\n";
            }
            //a = DatabasePlugin.getRs2ArrayList(rs);
        } catch (SQLException se) {
            se.printStackTrace();
        } finally {
            DatabasePlugin.close(con, st, rs);
        }
        return finalSearch;
    }
    public static ArrayList<LabelValueBean> getSelectBoxList(String sql,Connection con)
	{
		ArrayList<LabelValueBean> selectData = new ArrayList<LabelValueBean>();
		Statement st=null;
		ResultSet rs=null;
		try
		{
			st=con.createStatement();
			rs=st.executeQuery(sql);
			while(rs!=null && rs.next())
			{
				selectData.add(new LabelValueBean(rs.getString(2),rs.getString(1)));
			}
		}
		catch(SQLException se)
		{
			se.printStackTrace();
		}
		finally{
			DatabasePlugin.close(null, st, rs);	
			//DataBasePlugin.closeConnection(con);
		}
		return selectData;
	}
    public static ArrayList<HashMap<String, Object>> getListMapData(String sql)
	{
		ArrayList<HashMap<String, Object>> reportData = null;
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = connect();
			stmt = con.createStatement();
			commonFunctions.log("getListMapData Sql :::: "+sql);
			rs = stmt.executeQuery(sql);
			reportData = getListMapData(rs);
		}
		
		catch (Exception e) 
		{
			e.printStackTrace();// TODO: handle exception
		}
		
		finally
		{
			try 
			{
				if(rs!=null) 
				{
					rs.close();
				}
				
				if(stmt!=null) 
				{
					stmt.close();
				}
				
				if(con!=null) 
				{
					con.close();
				}
				
			}
			
			catch (SQLException e) 
			{
				e.printStackTrace();
			}
		}
		return reportData;
	}
    
    public static ArrayList<HashMap<String, Object>> getListMapData(ResultSet rs)
	{
		ArrayList<HashMap<String, Object>> reportData = null;
		ResultSetMetaData rm = null;
		HashMap<String, Object> rowData = null;
		int noOfCols = 0;
		try{
			rm = rs.getMetaData();
			noOfCols = rm.getColumnCount();
			if(rs!=null && rs.next())
			{
				 reportData = new ArrayList<HashMap<String, Object>>();
				do {
					rowData = new HashMap<String, Object>(noOfCols);
					for(int i=1;i<=noOfCols;i++)
					{
						rowData.put(rm.getColumnName(i).toLowerCase(), ((rs.getString(i)!=null && !rs.getString(i).equals(""))?rs.getString(i):""));
					} 
					reportData.add(rowData);
				} while(rs.next());
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			try {
				if(rs!=null) {
					rs.close();
				}
			} catch (SQLException se) {
				// TODO: handle exception
				se.printStackTrace();
			}
		}

		return reportData;
	}
    
    //swathi
    public synchronized static ArrayList getSelectBox(String sql)
	{
		ArrayList selectData = new ArrayList();
		Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
		try
		{
			con = connect();
			st=con.createStatement();
			rs=st.executeQuery(sql);
			while(rs!=null && rs.next())
			{
				selectData.add(new LabelValueBean(rs.getString(2),rs.getString(1)));
			}
		}
		catch(SQLException se)
		{
			se.printStackTrace();
		}
		 finally
	       {
	    	   try
	    	   {
	    	   st.close();
	    	   rs.close();
	    	   con.close();
	    	   }catch(Exception e)
	    	   {
	    		   e.printStackTrace();
	    	   }
	       }
		return selectData;
	}
    
    
    public static  int getIntegerFromQuery(String sql) {
		int result = 0;
		
		Connection con = null;
		Statement st = null;
		ResultSet rs = null;
		
		try {
			 con = connect();
			st = con.createStatement();
			rs = st.executeQuery(sql);
			while(rs != null && rs.next()) {
				result = rs.getInt(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
		finally 
		{
			
				try
				{
					if(rs!=null)
						rs.close();
					if(st!=null)
						rs.close();
					if(con!=null)
						con.close();
				} 
				catch (SQLException e)
				{
					e.printStackTrace();
				}
			
		}
		return result;
	}
    
    public static ArrayList getSingleArrayList(Connection con,String sql) {
		 ResultSet rs = null;
		ArrayList row = new ArrayList();
		Statement st = null;
		try {
			 
			st = con.createStatement();
			rs = st.executeQuery(sql);
			int colCount = ((ResultSetMetaData) rs.getMetaData())
					.getColumnCount();
			while (rs.next()) {

				for (int i = 1; i <= colCount; i++)
					row.add(rs.getString(i));

			}
		} catch (Exception e) {
			System.out.println("Exception at getting single arraylist"
					+ e.getMessage());
		} finally {
			close(con, st, rs);
		}

		return row;
	}
    public static ArrayList getSingleArrayList1(String sql) {
    	Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
		ArrayList row = new ArrayList();
		try {
			 con = connect();
			st = con.createStatement();
			rs = st.executeQuery(sql);
			int colCount = ((ResultSetMetaData) rs.getMetaData())
					.getColumnCount();
			while (rs.next()) {

				for (int i = 1; i <= colCount; i++)
					row.add(rs.getString(i));

			}
		} catch (Exception e) {
			System.out.println("Exception at getting single arraylist"
					+ e.getMessage());
		} finally 
		{
			
			try
			{
				if(rs!=null)
					rs.close();
				if(st!=null)
					rs.close();
				if(con!=null)
					con.close();
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		
	}
		return row;
	}
    
    public static ArrayList getSingleArrayList(String sql) {
    	Connection con = null;
    	Statement st=null;
    	ResultSet rs=null;
		ArrayList row = new ArrayList();
		try {
			 con = connect();
			st = con.createStatement();
			rs = st.executeQuery(sql);
			int colCount = ((ResultSetMetaData) rs.getMetaData())
					.getColumnCount();
			while (rs.next()) {

				for (int i = 1; i <= colCount; i++)
					row.add(rs.getString(i));

			}
		} catch (Exception e) {
			System.out.println("Exception Query:: "+sql);
			System.out.println("Exception at getting single arraylist"
					+ e.getMessage());
		} finally 
		{
			
			try
			{
				if(rs!=null)
					rs.close();
				if(st!=null)
					rs.close();
				if(con!=null)
					con.close();
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		
	}
		return row;
	}

    public int pstmtExecuteBatch(String sql,
			ArrayList<ArrayList<String>> sqlValues) throws SQLException {
		int a = -1;
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		ArrayList<String> innerSqlValues;
		try {
			conn = DatabasePlugin.connect();
			conn.setAutoCommit(false);
			pstmt = conn.prepareStatement(sql);
			if (sqlValues != null && sqlValues.size() > 0) {
				for (int i = 0; i < sqlValues.size(); i++) {
					innerSqlValues = (ArrayList<String>) sqlValues.get(i);
					for (int j = 0; j < innerSqlValues.size(); j++) {
						pstmt.setString(j + 1, innerSqlValues.get(j).toString());
						// System.out.println(j +
						// 1+" :: "+innerSqlValues.get(j).toString());
					}
					pstmt.addBatch();
				}
			}
			int count[] = pstmt.executeBatch();
			// System.out.println("SQL :: "+sql);
			for (int i = 0; i < count.length; i++) {
				// System.out.println("count value of"+i+"=>"+count[i]);
				if (count[i] >= 0) {
					a = 0;
					continue;
				} else {
					a = -1;
					break;
				}
			}
		} catch (SQLException se) {
			a = -1;
			se.printStackTrace();
		} finally {
			if (a >= 0) {
				conn.commit();
				// System.out.println("commited");
			} else {
				conn.rollback();
				// System.out.println("rollback");
			}
			if (conn != null && !conn.isClosed()) {
				conn.close();
			}
			if (pstmt != null) {
				pstmt.close();
			}
			if (rs != null) {
				rs.close();
			} // closing all connections statement
			rs = null;
			pstmt = null;
			conn = null;
		}
		return a;
	}
    
    
	public int pstmtExecuteBatchWithMultipleQueries(ArrayList<String> sqls,
			ArrayList<ArrayList<ArrayList<String>>> sqlValues)
			throws SQLException {
		int a = -1;
		Connection conn = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		ArrayList innerSqlValues;
		ArrayList<ArrayList<String>> outerSqlValues;
		String[] column_type = null;
		int is_all_executed = 0,is_all_executed2 = 0;
		int count_all_queries = sqlValues.size();
		try {
			conn = DatabasePlugin.connect();
			conn.setAutoCommit(false);
			if (sqlValues != null && sqlValues.size() > 0) {
				// System.out.println(sqlValues.size() + " :: " + sqls.size());
				for (int s = 0; s < sqls.size(); s++) {
					pstmt = conn.prepareStatement(sqls.get(s));
					outerSqlValues = (ArrayList<ArrayList<String>>) sqlValues
							.get(s);
					
					for (int i = 0; i < outerSqlValues.size(); i++) {
						innerSqlValues = (ArrayList<String>) outerSqlValues
								.get(i);
						for (int j = 0; j < innerSqlValues.size(); j++) {
							//System.out.println("innerSqlValues.get("+j+") " +innerSqlValues.get(j));
							if (innerSqlValues.get(j) == null
									|| innerSqlValues.get(j).equals("null")) {
								pstmt.setNull(j + 1, Types.NULL);
							} else {
								column_type = ((String) innerSqlValues.get(j))
										.split("~");
								// System.out.println("column_type.length"+column_type.length);
								if (column_type.length == 2) {
									// System.out.println("column_type"+column_type[1]);
									if (column_type[0] == null
											|| column_type[0].equals("null")) {
										column_type[0] = null;
										if (column_type[1].equals("int")) {
											pstmt.setNull(j + 1, Types.NULL);
										} else if (column_type[1]
												.equals("float")) {
											pstmt.setNull(j + 1, Types.NULL);
										} else if (column_type[1]
												.equals("bool")) {
											pstmt.setNull(j + 1, Types.NULL);
										} else if (column_type[1]
												.equals("numeric")) {
											pstmt.setNull(j + 1, Types.NULL);
										}
									} else {
										// System.out.println("column_type1"+column_type[1]);
										column_type[0] = column_type[0];
										if (column_type[1].equals("int")) {
											// System.out.println(j +
											// 1+"final came"+Integer.parseInt(column_type[0]));
											pstmt.setInt(j + 1, Integer
													.parseInt(column_type[0]));
										} else if (column_type[1]
												.equals("float")) {
											pstmt.setFloat(j + 1, Float
													.parseFloat(column_type[0]));
										} else if (column_type[1]
												.equals("bool")) {
											pstmt.setBoolean(
													j + 1,
													Boolean.parseBoolean(column_type[0]));
										} else if (column_type[1]
												.equals("numeric")) {
											// System.out.println(i+1+" :: "+column_type[0]);
											pstmt.setObject(j + 1,
													column_type[0],
													java.sql.Types.NUMERIC);
										}
									}

								} else {
									if (innerSqlValues.get(j) == null
											|| innerSqlValues.get(j).equals(
													"null")) {
										pstmt.setNull(j + 1, Types.NULL);
									} else {
										// System.out.println("final came2");
										pstmt.setString(j + 1,
												(String) innerSqlValues.get(j));
									}
								}
								// System.out.println(j + 1 + " :: " + (String)
								// innerSqlValues.get(j));
							}
						}
						pstmt.addBatch();
					}

					int count[] = pstmt.executeBatch();
					
					for (int i = 0; i < count.length; i++) {
						if (count[i] > 0) {
							is_all_executed2++;
							a = 0;
							// System.out.println("query executed...");
							continue;
						} else {
							a = -1;
							// System.out.println("query execution failed...");
							break;
						}
					}
					pstmt.clearBatch();

					is_all_executed++;
//System.out.println("is_all_executed :: "+is_all_executed+" :: is_all_executed2 :: "+is_all_executed2);
				}
			}
		} catch (SQLException se) {
			a = -1;
			se.printStackTrace();
			se.getNextException();
		} catch (Exception se) {
			a = -1;
			se.printStackTrace();
		} finally {
			//System.out.println("a :: " + count_all_queries +" :: b :: "+is_all_executed2 );
			/*if (count_all_queries == is_all_executed) {

			} else {
				a = -1;
			}*/
			/*if(count_all_queries == is_all_executed2 ) {
				a = 0;
			} else {
				a = -1;
			}*/
			if (a >= 0) {
				conn.commit();
			//	System.out.println("commited");
			} else {
				conn.rollback();
			//	System.out.println("rollback");
			}

			if (conn != null && !conn.isClosed()) {
				conn.close();
			}
			if (pstmt != null) {
				pstmt.close();
			}
			if (rs != null) {
				rs.close();
			} // closing all connections statement
			rs = null;
			pstmt = null;
			conn = null;
		}
		return a;
	}

 
    public static int getAttributeIntValue(String sql) {
		Statement st = null;
		ResultSet rs = null;
		int retVal = 0;
		Connection con=null;
		try {
			con = connect();
			st = con.createStatement();
			rs = st.executeQuery(sql);
			while (rs != null && rs.next()) {
				retVal = rs.getInt(1);

			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DataBasePlugin.closeResultSet(rs);
			DataBasePlugin.closeStatement(st);
			DataBasePlugin.closeConnection(con);
		}
		return retVal;
	}
    
    
    
    public  static String getAttributeName(String sql)
  	{
  		Connection con=null;
  		Statement st=null;
  		ResultSet rs = null;
  		String attributeName=null;
  		try{
  			con = connect();
  			st=con.createStatement();
  			rs=st.executeQuery(sql);
  			if(rs!=null && rs.next())
  			{	
  				attributeName = rs.getString(1);	

  			}
  		}catch(Exception e){
  			e.printStackTrace();

  		}finally
  		{
  			DataBasePlugin.closeResultSet(rs);
  			DataBasePlugin.closeStatement(st);
  			DataBasePlugin.closeConnection(con);
  		}	
  		return attributeName ;
  	}
  
    
}

